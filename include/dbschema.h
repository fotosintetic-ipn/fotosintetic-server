#pragma once

// generated by C:\Users\ascii\.cpm\sqlpp11\106d8c446234785f651d6d32273284962d3822a6\scripts\ddl2cpp .\db.sql dbschema fotosintetic

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace fotosintetic
{
  namespace Data_
  {
    struct EntryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entry_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entryId;
            T& operator()() { return entryId; }
            const T& operator()() const { return entryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct DeviceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "device_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deviceId;
            T& operator()() { return deviceId; }
            const T& operator()() const { return deviceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Ph
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ph";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ph;
            T& operator()() { return ph; }
            const T& operator()() const { return ph; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct AmbientHumidity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ambient_humidity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ambientHumidity;
            T& operator()() { return ambientHumidity; }
            const T& operator()() const { return ambientHumidity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct AmbientTemperature
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ambient_temperature";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ambientTemperature;
            T& operator()() { return ambientTemperature; }
            const T& operator()() const { return ambientTemperature; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Roll
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roll";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roll;
            T& operator()() { return roll; }
            const T& operator()() const { return roll; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Pitch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pitch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pitch;
            T& operator()() { return pitch; }
            const T& operator()() const { return pitch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Moisture
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "moisture";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moisture;
            T& operator()() { return moisture; }
            const T& operator()() const { return moisture; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct WindSpeed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windSpeed;
            T& operator()() { return windSpeed; }
            const T& operator()() const { return windSpeed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Data_

  struct Data: sqlpp::table_t<Data,
               Data_::EntryId,
               Data_::DeviceId,
               Data_::Ph,
               Data_::AmbientHumidity,
               Data_::AmbientTemperature,
               Data_::Roll,
               Data_::Pitch,
               Data_::Moisture,
               Data_::WindSpeed>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T data;
        T& operator()() { return data; }
        const T& operator()() const { return data; }
      };
    };
  };
  namespace Devices_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct DeviceName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "device_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deviceName;
            T& operator()() { return deviceName; }
            const T& operator()() const { return deviceName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Devices_

  struct Devices: sqlpp::table_t<Devices,
               Devices_::Id,
               Devices_::Password,
               Devices_::DeviceName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "devices";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T devices;
        T& operator()() { return devices; }
        const T& operator()() const { return devices; }
      };
    };
  };
} // namespace fotosintetic
